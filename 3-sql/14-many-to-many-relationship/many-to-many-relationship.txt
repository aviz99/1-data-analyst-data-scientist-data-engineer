-- 07 / 10 / 2023
-- Day - 5
-- Many To Many Relationship
-- relasi dimana ada relasi antara 2 tabel dimana table pertama bisa punya banyak relasi di table kedua,
-- dan table kedua pun punya banyak relasi di table pertama
-- Solusi yang biasa dilakukan jika terjadi relasi many to many adalah, biasanya kita akan menambah 1 tabel ditengahnya
-- Tabel ini bertugas sebagai jembatan untuk menggabungkan relasi many to many

-- membuat Table Order
CREATE TABLE orders
(
    id		INT		NOT NULL	AUTO_INCREMENT,
    total	INT		NOT NULL,
    order_date	DATETIME	NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
) ENGINE = InnoDB;

-- membuat Table Order Detail
CREATE TABLE orders_detail
(
    id_product	VARCHAR(10)	NOT NULL,
    id_order	INT		NOT NULL,
    price	INT		NOT NULL,
    quantity	INT		NOT NULL,
    PRIMARY KEY (id_product, id_order)
) ENGINE = InnoDB;

-- membuat Foreign Key id_product & id_order
ALTER TABLE orders_detail
ADD CONSTRAINT fk_orders_detail_product
FOREIGN KEY (id_product) REFERENCES products (id)

ALTER TABLE orders_detail
ADD CONSTRAINT fk_orders_detail_orders
FOREIGN KEY (id_order) REFERENCES orders (id)

INSERT INTO orders(total) VALUES (50000);

INSERT INTO orders_detail(id_product, id_order, price, quantity)
VALUES ('P001', 1, 25000, 1),
       ('P002', 1, 25000, 1);
       
INSERT INTO orders_detail(id_product, id_order, price, quantity)
VALUES ('P003', 2, 25000, 1),
       ('P004', 3, 25000, 1);
       
INSERT INTO orders_detail(id_product, id_order, price, quantity)
VALUES ('P001', 2, 25000, 1),
       ('P003', 3, 25000, 1);

SELECT * FROM orders_detail;

-- melihat data Orders, Detail & Products-nya
SELECT * FROM orders
JOIN orders_detail ON (orders_detail.id_order = orders.id)
JOIN products ON (products.id = orders_detail.id_product);

SELECT orders.id, products.id, products.name, orders_detail.quantity, orders_detail.price FROM orders
JOIN orders_detail ON (orders_detail.id_order = orders.id)
JOIN products ON (products.id = orders_detail.id_product);